The necessary files to test the code are located in the "Scripts/Implementation" folder. You can run a test using a fixed input or modify the test mode in the code to make it read data in real time.

In the RapidTest.ino file, the DHT11/DHT22 sensor is read every 5 seconds. This is done for testing purposes, to check that the inputs and outputs are working correctly. However, for proper operation, it is ideal to read data every 1 hour, since the model was trained with that frequency. To achieve this, simply change "delay(5000)" to "delay(3600000)", which is equal to one hour (3,600,000 milliseconds). It is also possible to increase the reading frequency if you implement an appropriate memory buffer.

To run the code, open the RapidTest.ino file and upload it to the MCU. Make sure you have the required libraries installed for the board you are using.

In the same folder, there is a .zip file required to run the model on the MCU. You can test the input vector by navigating to the following path in the development environment: File >> Examples >> prueba_inferencing >> static_buffer >> static_buffer. Once executed, you will get an output with normalized data. Since there is only one input value, denormalization can be easily calculated. In theory, the expected output should look something like this: Predictions: class 1: 0.44836, class 2: 0.90073, class 3: 0.40255, class 4: 0.91769, class 5: 0.39980, class 6: 0.88358.

Test vector (if you choose the "examples" path):
""  static const float features[] = {
    0.4584781769022789, 0.9286297733306106, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4488219389725763, 0.9433326526444762, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4414831981460023, 0.9475188891157852, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4314407106991115, 0.9424137226873596, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4271919660100424, 0.9216867469879518, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4210119737350327, 0.9176026138452116, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4132869833912707, 0.9214825403308148, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4044032444959443, 0.9239330202164592, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.3912707609115488, 0.9266898100878088, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.3835457705677867, 0.9151521339595672, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4511394360757049, 0.7956912395344088, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.5384318269602163, 0.670512558709414, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.6280417149478563, 0.5739228098836022, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.7118578601776747, 0.4939759036144578, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.7782927771340286, 0.4390443128445987, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.8134414831981459, 0.4249540535021441, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.8115102356122054, 0.4457831325301205, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.7694090382387021, 0.5060240963855421, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.7041328698339127, 0.5926077190116398, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.6357667052916184, 0.6871554012660812, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.5646967941290074, 0.7899734531345722, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.5063731170336037, 0.8766591790892383, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4716106604866744, 0.9163773739023892, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4638856701429124, 0.9088217275883194, -0.05201762, -0.11797583, 0.06664423, 0.03551533
}; ""



//Español
Los archivos necesarios para probar el código están ubicados en la carpeta "Scripts/Implementation". Puedes hacer una prueba usando una entrada fija o modificar el modo de prueba en el código para que lea datos en tiempo real.

En el archivo RapidTest.ino se realiza la lectura del sensor DHT11/DHT22 cada 5 segundos. Esto se hace con fines de prueba para verificar que las entradas y salidas estén funcionando correctamente. Sin embargo, lo ideal para su funcionamiento real es que la lectura se realice cada 1 hora, ya que el modelo fue entrenado con esa frecuencia. Para lograrlo, simplemente cambia delay(5000) por delay(3600000), que equivale a una hora (3,600,000 milisegundos). También es posible aumentar la frecuencia de lectura si implementas un buffer de memoria adecuado.

Para ejecutar el código, abre el archivo RapidTest.ino y cárgalo en la MCU. Asegúrate de tener instaladas las librerías necesarias correspondientes a la placa que estés usando.

Dentro de la misma carpeta hay un archivo .zip necesario para correr el modelo en la MCU. Puedes probar el vector de entrada siguiendo esta ruta en el entorno de desarrollo:
File >> Examples >> prueba_inferencing >> static_buffer >> static_buffer
Al hacerlo, obtendrás una salida con datos normalizados. Como es un solo valor de entrada, la desnormalización se puede calcular fácilmente. En teoría, la salida esperada debería ser algo similar a lo siguiente:

Predictions:  
  class 1: 0.44836  
  class 2: 0.90073  
  class 3: 0.40255  
  class 4: 0.91769  
  class 5: 0.39980  
  class 6: 0.88358

Vector de prueba (Este es si agarras el "examples"): 
""  static const float features[] = {
    0.4584781769022789, 0.9286297733306106, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4488219389725763, 0.9433326526444762, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4414831981460023, 0.9475188891157852, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4314407106991115, 0.9424137226873596, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4271919660100424, 0.9216867469879518, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4210119737350327, 0.9176026138452116, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4132869833912707, 0.9214825403308148, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4044032444959443, 0.9239330202164592, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.3912707609115488, 0.9266898100878088, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.3835457705677867, 0.9151521339595672, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4511394360757049, 0.7956912395344088, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.5384318269602163, 0.670512558709414, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.6280417149478563, 0.5739228098836022, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.7118578601776747, 0.4939759036144578, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.7782927771340286, 0.4390443128445987, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.8134414831981459, 0.4249540535021441, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.8115102356122054, 0.4457831325301205, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.7694090382387021, 0.5060240963855421, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.7041328698339127, 0.5926077190116398, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.6357667052916184, 0.6871554012660812, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.5646967941290074, 0.7899734531345722, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.5063731170336037, 0.8766591790892383, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4716106604866744, 0.9163773739023892, -0.05201762, -0.11797583, 0.06664423, 0.03551533, 0.4638856701429124, 0.9088217275883194, -0.05201762, -0.11797583, 0.06664423, 0.03551533
}; ""


